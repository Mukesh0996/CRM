{"ast":null,"code":"var _jsxFileName = \"/Users/mukesh-8058/Desktop/CRM/src/Pages/Leads.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LeadActions from '../Components/Leads/LeadsActions';\nimport LeadsContainer from \"../Components/Leads/LeadsContainer\";\nimport useHttp from \"../Hooks/httpHook\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\nimport { getAllLeads, getColumns } from \"../Store/Leads/leads-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LeadsModule = () => {\n  _s();\n\n  const ctx = useContext(AuthContext);\n  const {\n    sendRequest: getLeads,\n    isLoading,\n    error\n  } = useHttp(getAllLeads, true);\n  const {\n    sendRequest: getLeadColumns\n  } = useHttp(getColumns, true);\n  const dispatch = useDispatch();\n  getLeadColumns(ctx.orgId, ctx.token);\n  useEffect(() => {\n    getLeads(ctx.orgId);\n  }, []);\n  const leadColumns = useSelector(state => state.leads.columns);\n  const leads = useSelector(state => state.leads.leads);\n  console.log(leads);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LeadActions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(LeadsContainer, {\n      leadkeys: leadColumns || [],\n      leads: leads\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, this);\n};\n\n_s(LeadsModule, \"1bWe/FuSP3ReMb9hAde4DqMC0Tg=\", false, function () {\n  return [useHttp, useHttp, useDispatch, useSelector, useSelector];\n});\n\n_c = LeadsModule;\nexport default LeadsModule;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeadsModule\");","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Pages/Leads.js"],"names":["useContext","Fragment","useEffect","useDispatch","useSelector","LeadActions","LeadsContainer","useHttp","AuthContext","getAllLeads","getColumns","LeadsModule","ctx","sendRequest","getLeads","isLoading","error","getLeadColumns","dispatch","orgId","token","leadColumns","state","leads","columns","console","log"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,8BAAxC;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,GAAG,GAAGZ,UAAU,CAACQ,WAAD,CAAtB;AAEA,QAAM;AAAEK,IAAAA,WAAW,EAAEC,QAAf;AAAyBC,IAAAA,SAAzB;AAAoCC,IAAAA;AAApC,MAA8CT,OAAO,CAACE,WAAD,EAAc,IAAd,CAA3D;AACA,QAAM;AAACI,IAAAA,WAAW,EAAGI;AAAf,MAAiCV,OAAO,CAACG,UAAD,EAAa,IAAb,CAA9C;AACD,QAAMQ,QAAQ,GAAGf,WAAW,EAA5B;AACAc,EAAAA,cAAc,CAACL,GAAG,CAACO,KAAL,EAAYP,GAAG,CAACQ,KAAhB,CAAd;AAEClB,EAAAA,SAAS,CAAC,MAAM;AACbY,IAAAA,QAAQ,CAACF,GAAG,CAACO,KAAL,CAAR;AAGF,GAJQ,EAIP,EAJO,CAAT;AAMA,QAAME,WAAW,GAAGjB,WAAW,CAACkB,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,OAAtB,CAA/B;AACA,QAAMD,KAAK,GAAGnB,WAAW,CAACkB,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYA,KAAtB,CAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,sBAAO,QAAC,QAAD;AAAA,4BACK,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADL,eAEK,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEF,WAAW,IAAI,EAAzC;AAA6C,MAAA,KAAK,EAAEE;AAApD;AAAA;AAAA;AAAA;AAAA,YAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,CAtBD;;GAAMZ,W;UAGkDJ,O,EACbA,O,EACvBJ,W,EASIC,W,EACNA,W;;;KAfZO,W;AAwBN,eAAeA,WAAf","sourcesContent":["import { useContext } from \"react\";\nimport { Fragment, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LeadActions from '../Components/Leads/LeadsActions';\nimport LeadsContainer from \"../Components/Leads/LeadsContainer\";\nimport useHttp from \"../Hooks/httpHook\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\nimport { getAllLeads, getColumns } from \"../Store/Leads/leads-actions\";\n\nconst LeadsModule = () => {\n    const ctx = useContext(AuthContext);\n\n    const { sendRequest: getLeads, isLoading, error } = useHttp(getAllLeads, true);\n    const {sendRequest : getLeadColumns} = useHttp(getColumns, true);\n   const dispatch = useDispatch();\n   getLeadColumns(ctx.orgId, ctx.token);\n\n    useEffect(() => {\n       getLeads(ctx.orgId);\n    \n      \n    },[]);\n\n    const leadColumns = useSelector(state => state.leads.columns);\n    const leads = useSelector(state => state.leads.leads);\n    console.log(leads);\n\n    return <Fragment> \n                <LeadActions/>\n                <LeadsContainer leadkeys={leadColumns || []} leads={leads}/>\n            </Fragment>\n}\n\nexport default LeadsModule;"]},"metadata":{},"sourceType":"module"}