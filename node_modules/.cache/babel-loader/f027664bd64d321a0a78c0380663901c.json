{"ast":null,"code":"const url = \"http://localhost:8080\";\nexport const getLeadsFields = async (orgId, token) => {\n  const response = await fetch(`${url}/org/${orgId}/leads/leadstable`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    let error = new Error(responseData.message || \"Error Occured!\");\n    error.isValid = responseData.isValid || false;\n    error.value = responseData.value || \"\";\n    throw error;\n  }\n\n  return responseData;\n};\nexport const postLeadRecord = async (data, token) => {\n  const {\n    orgId\n  } = data;\n  delete data['orgId'];\n  const leadObj = data;\n  const response = await fetch(`${url}/org/${orgId}/leads/addrecord`, {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    let error = new Error(responseData.message);\n    error.isValid = responseData.isValid || false;\n    error.value = responseData.value || \"\";\n    throw error;\n  }\n\n  return responseData;\n};","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/library/leadsFns.js"],"names":["url","getLeadsFields","orgId","token","response","fetch","method","headers","responseData","json","ok","error","Error","message","isValid","value","postLeadRecord","data","leadObj","body","JSON","stringify"],"mappings":"AACA,MAAMA,GAAG,GAAG,uBAAZ;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAOC,KAAP,EAAcC,KAAd,KAAwB;AAClD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,GAAI,QAAOE,KAAM,mBAArB,EAAwC;AAChEI,IAAAA,MAAM,EAAC,KADyD;AAEhEC,IAAAA,OAAO,EAAG;AACN,sBAAe,kBADT;AAEN,uBAAkB,UAASJ,KAAM;AAF3B;AAFsD,GAAxC,CAA5B;AAOA,QAAMK,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AACA,MAAG,CAACL,QAAQ,CAACM,EAAb,EAAiB;AACb,QAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAb,IAAwB,gBAAlC,CAAZ;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBN,YAAY,CAACM,OAAb,IAAwB,KAAxC;AACAH,IAAAA,KAAK,CAACI,KAAN,GAAcP,YAAY,CAACO,KAAb,IAAsB,EAApC;AACA,UAAMJ,KAAN;AACH;;AAED,SAAOH,YAAP;AACH,CAjBM;AAmBP,OAAO,MAAMQ,cAAc,GAAG,OAAMC,IAAN,EAAYd,KAAZ,KAAqB;AAE/C,QAAM;AAAED,IAAAA;AAAF,MAAYe,IAAlB;AACA,SAAOA,IAAI,CAAC,OAAD,CAAX;AACA,QAAMC,OAAO,GAAGD,IAAhB;AACA,QAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,GAAI,QAAOE,KAAM,kBAArB,EAAuC;AAC/DI,IAAAA,MAAM,EAAC,MADwD;AAE/Da,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFyD;AAG/DV,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAASJ,KAAM;AAF5B;AAHsD,GAAvC,CAA5B;AAQA,QAAMK,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AAEA,MAAG,CAACL,QAAQ,CAACM,EAAb,EAAiB;AACb,QAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAvB,CAAZ;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBN,YAAY,CAACM,OAAb,IAAwB,KAAxC;AACAH,IAAAA,KAAK,CAACI,KAAN,GAAcP,YAAY,CAACO,KAAb,IAAsB,EAApC;AACA,UAAMJ,KAAN;AACH;;AACD,SAAOH,YAAP;AACH,CAtBM","sourcesContent":["\nconst url = \"http://localhost:8080\";\n\nexport const getLeadsFields = async (orgId, token) => {\n    const response = await fetch(`${url}/org/${orgId}/leads/leadstable`,{\n        method:\"GET\",\n        headers : {\n            \"Content-Type\":\"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    });\n    const responseData = await response.json();\n    if(!response.ok) {\n        let error = new Error(responseData.message || \"Error Occured!\")\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\";\n        throw(error);\n    }\n   \n    return responseData;\n}\n\nexport const postLeadRecord = async(data, token) =>{\n\n    const { orgId } = data;\n    delete data['orgId'];\n    const leadObj = data;\n    const response = await fetch(`${url}/org/${orgId}/leads/addrecord`,{\n        method:\"POST\",\n        body: JSON.stringify(data),\n        headers :{\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    });\n    const responseData = await response.json();\n\n    if(!response.ok) {\n        let error = new Error(responseData.message);\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\"\n        throw(error)\n    }\n    return responseData;\n}"]},"metadata":{},"sourceType":"module"}