{"ast":null,"code":"const url = \"http://localhost:8080\";\nexport const postLeadRecord = async (data, token) => {\n  const {\n    orgId\n  } = data;\n  delete data['orgId'];\n  const leadObj = data;\n  const response = await fetch(`${url}/org/${orgId}/leads/addrecord`, {\n    method: \"POST\",\n    body: JSON.stringify(leadObj),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    let error = new Error(responseData.message);\n    error.isValid = responseData.isValid || false;\n    error.value = responseData.value || \"\";\n    throw error;\n  }\n\n  return responseData;\n};","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/library/leadsFns.js"],"names":["url","postLeadRecord","data","token","orgId","leadObj","response","fetch","method","body","JSON","stringify","headers","responseData","json","ok","error","Error","message","isValid","value"],"mappings":"AACA,MAAMA,GAAG,GAAG,uBAAZ;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAMC,IAAN,EAAYC,KAAZ,KAAqB;AAE/C,QAAM;AAAEC,IAAAA;AAAF,MAAYF,IAAlB;AACA,SAAOA,IAAI,CAAC,OAAD,CAAX;AACA,QAAMG,OAAO,GAAGH,IAAhB;AACA,QAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,GAAI,QAAOI,KAAM,kBAArB,EAAuC;AAC/DI,IAAAA,MAAM,EAAC,MADwD;AAE/DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAFyD;AAG/DO,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAAST,KAAM;AAF5B;AAHsD,GAAvC,CAA5B;AAQA,QAAMU,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B;;AAEA,MAAG,CAACR,QAAQ,CAACS,EAAb,EAAiB;AACb,QAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAvB,CAAZ;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBN,YAAY,CAACM,OAAb,IAAwB,KAAxC;AACAH,IAAAA,KAAK,CAACI,KAAN,GAAcP,YAAY,CAACO,KAAb,IAAsB,EAApC;AACA,UAAMJ,KAAN;AACH;;AACD,SAAOH,YAAP;AACH,CAtBM","sourcesContent":["\nconst url = \"http://localhost:8080\";\n\nexport const postLeadRecord = async(data, token) =>{\n\n    const { orgId } = data;\n    delete data['orgId'];\n    const leadObj = data;\n    const response = await fetch(`${url}/org/${orgId}/leads/addrecord`,{\n        method:\"POST\",\n        body: JSON.stringify(leadObj),\n        headers :{\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    });\n    const responseData = await response.json();\n\n    if(!response.ok) {\n        let error = new Error(responseData.message);\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\"\n        throw(error)\n    }\n    return responseData;\n}"]},"metadata":{},"sourceType":"module"}