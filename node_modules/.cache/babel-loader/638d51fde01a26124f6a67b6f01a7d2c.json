{"ast":null,"code":"import { leadActions } from \"./leads-slice\";\nconst url = \"http://localhost:8080\";\nexport const getLeadsFields = async (orgId, token) => {\n  const response = await fetch(`${url}/org/${orgId}/leads/leadstable`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    let error = new Error(responseData.message || \"Error Occured!\");\n    error.isValid = responseData.isValid || false;\n    error.value = responseData.value || \"\";\n    throw error;\n  }\n\n  return responseData;\n};\nexport const getAllLeads = (orgId, token) => {\n  console.log(orgId, token);\n  return dispatch => {\n    const response = fetch(`${url}/org/${orgId}/leads/getrecords`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n  };\n};\nexport const addLeadRecord = (data, token) => {\n  return async dispatch => {\n    console.log(\"executing\");\n    const {\n      orgId\n    } = data;\n    delete data['orgId'];\n    const leadObj = data;\n    const response = await fetch(`${url}/org/${orgId}/leads/addrecord`, {\n      method: \"POST\",\n      body: JSON.stringify(leadObj),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      let error = new Error(responseData.message);\n      error.isValid = responseData.isValid || false;\n      error.value = responseData.value || \"\";\n      throw error;\n    }\n\n    dispatch(leadActions.replaceLeads({\n      leads: responseData,\n      canCreate: true,\n      canEdit: true\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Store/Leads/leads-actions.js"],"names":["leadActions","url","getLeadsFields","orgId","token","response","fetch","method","headers","responseData","json","ok","error","Error","message","isValid","value","getAllLeads","console","log","dispatch","addLeadRecord","data","leadObj","body","JSON","stringify","replaceLeads","leads","canCreate","canEdit"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AAEA,MAAMC,GAAG,GAAG,uBAAZ;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAOC,KAAP,EAAcC,KAAd,KAAwB;AAClD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,GAAI,QAAOE,KAAM,mBAArB,EAAwC;AAChEI,IAAAA,MAAM,EAAC,KADyD;AAEhEC,IAAAA,OAAO,EAAG;AACN,sBAAe,kBADT;AAEN,uBAAkB,UAASJ,KAAM;AAF3B;AAFsD,GAAxC,CAA5B;AAOA,QAAMK,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AACA,MAAG,CAACL,QAAQ,CAACM,EAAb,EAAiB;AACb,QAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAb,IAAwB,gBAAlC,CAAZ;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBN,YAAY,CAACM,OAAb,IAAwB,KAAxC;AACAH,IAAAA,KAAK,CAACI,KAAN,GAAcP,YAAY,CAACO,KAAb,IAAsB,EAApC;AACA,UAAMJ,KAAN;AACH;;AAED,SAAOH,YAAP;AACH,CAjBM;AAoBP,OAAO,MAAMQ,WAAW,GAAG,CAACd,KAAD,EAAQC,KAAR,KAAkB;AACzCc,EAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ,EAAmBC,KAAnB;AACA,SAAQgB,QAAD,IAAc;AACjB,UAAMf,QAAQ,GAAGC,KAAK,CAAE,GAAEL,GAAI,QAAOE,KAAM,mBAArB,EAAwC;AAC1DI,MAAAA,MAAM,EAAC,KADmD;AAE1DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAASJ,KAAM;AAF5B;AAFiD,KAAxC,CAAtB;AAOH,GARD;AASH,CAXM;AAaP,OAAO,MAAMiB,aAAa,GAAG,CAACC,IAAD,EAAOlB,KAAP,KAAiB;AAE1C,SAAO,MAAOgB,QAAP,IAAoB;AACvBF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM;AAAEhB,MAAAA;AAAF,QAAYmB,IAAlB;AACA,WAAOA,IAAI,CAAC,OAAD,CAAX;AACA,UAAMC,OAAO,GAAGD,IAAhB;AACA,UAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,GAAI,QAAOE,KAAM,kBAArB,EAAuC;AACnEI,MAAAA,MAAM,EAAC,MAD4D;AAEnEiB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAF6D;AAGnEf,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAASJ,KAAM;AAF5B;AAH0D,KAAvC,CAA5B;AASJ,UAAMK,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AAEA,QAAG,CAACL,QAAQ,CAACM,EAAb,EAAiB;AACb,UAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAvB,CAAZ;AACAF,MAAAA,KAAK,CAACG,OAAN,GAAgBN,YAAY,CAACM,OAAb,IAAwB,KAAxC;AACAH,MAAAA,KAAK,CAACI,KAAN,GAAcP,YAAY,CAACO,KAAb,IAAsB,EAApC;AACA,YAAMJ,KAAN;AACH;;AACDQ,IAAAA,QAAQ,CAACpB,WAAW,CAAC2B,YAAZ,CAAyB;AAC9BC,MAAAA,KAAK,EAAEnB,YADuB;AAE9BoB,MAAAA,SAAS,EAAE,IAFmB;AAG9BC,MAAAA,OAAO,EAAE;AAHqB,KAAzB,CAAD,CAAR;AAKC,GA3BD;AA4BH,CA9BM","sourcesContent":["import { leadActions } from \"./leads-slice\";\n\nconst url = \"http://localhost:8080\";\n\nexport const getLeadsFields = async (orgId, token) => {\n    const response = await fetch(`${url}/org/${orgId}/leads/leadstable`,{\n        method:\"GET\",\n        headers : {\n            \"Content-Type\":\"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    });\n    const responseData = await response.json();\n    if(!response.ok) {\n        let error = new Error(responseData.message || \"Error Occured!\")\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\";\n        throw(error);\n    }\n   \n    return responseData;\n}\n\n\nexport const getAllLeads = (orgId, token) => {\n    console.log(orgId, token);\n    return (dispatch) => {\n        const response = fetch(`${url}/org/${orgId}/leads/getrecords`,{\n            method:\"GET\",\n            headers :{\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        })\n    }\n}\n\nexport const addLeadRecord = (data, token) => {\n\n    return async (dispatch) => {\n        console.log(\"executing\");\n        const { orgId } = data;\n        delete data['orgId'];\n        const leadObj = data;\n        const response = await fetch(`${url}/org/${orgId}/leads/addrecord`,{\n        method:\"POST\",\n        body: JSON.stringify(leadObj),\n        headers :{\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    });\n\n    const responseData = await response.json();\n\n    if(!response.ok) {\n        let error = new Error(responseData.message);\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\";\n        throw(error)\n    }\n    dispatch(leadActions.replaceLeads({\n        leads: responseData,\n        canCreate: true,\n        canEdit: true\n    }))\n    }\n}"]},"metadata":{},"sourceType":"module"}