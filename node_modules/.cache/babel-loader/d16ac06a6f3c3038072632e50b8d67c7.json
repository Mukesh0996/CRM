{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  fields: {}\n};\nconst leadSlice = createSlice({\n  name: \"leadSlice\",\n  initialState: initialState,\n  reducers: {\n    addFields(state, action) {\n      state.fields = action.payload.fields;\n    }\n\n  }\n});\nconst url = \"http://localhost:8080\";\nexport const getFields = (orgId, token) => {\n  return async dispatch => {\n    console.log(dispatch);\n    const response = await fetch(`${url}/org/${orgId}/leads/leadstable`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n    dispatch(leadsActions.addFields({\n      fields: responseData\n    }));\n\n    if (!response.ok) {\n      let error = new Error(responseData.message || \"Error Occured!\");\n      error.isValid = responseData.isValid || false;\n      error.value = responseData.value || \"\";\n      throw error;\n    }\n  };\n};\ngetFields();\nexport const leadsActions = leadSlice.actions;\nexport default leadSlice;","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Store/Leads/leads-slice.js"],"names":["createSlice","initialState","fields","leadSlice","name","reducers","addFields","state","action","payload","url","getFields","orgId","token","dispatch","console","log","response","fetch","method","headers","responseData","json","leadsActions","ok","error","Error","message","isValid","value","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,MAAM,EAAC;AAAT,CAArB;AAEA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC1BI,EAAAA,IAAI,EAAC,WADqB;AAE1BH,EAAAA,YAAY,EAAEA,YAFY;AAG1BI,EAAAA,QAAQ,EAAG;AACPC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACL,MAAN,GAAeM,MAAM,CAACC,OAAP,CAAeP,MAA9B;AACH;;AAHM;AAHe,CAAD,CAA7B;AAUA,MAAMQ,GAAG,GAAG,uBAAZ;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAiB;AAEtC,SAAO,MAAOC,QAAP,IAAoB;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACC,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,GAAI,QAAOE,KAAM,mBAArB,EAAwC;AAChEO,MAAAA,MAAM,EAAC,KADyD;AAEhEC,MAAAA,OAAO,EAAG;AACN,wBAAe,kBADT;AAEN,yBAAkB,UAASP,KAAM;AAF3B;AAFsD,KAAxC,CAA5B;AAOA,UAAMQ,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;AACAR,IAAAA,QAAQ,CAACS,YAAY,CAACjB,SAAb,CAAuB;AAC5BJ,MAAAA,MAAM,EAAEmB;AADoB,KAAvB,CAAD,CAAR;;AAGA,QAAG,CAACJ,QAAQ,CAACO,EAAb,EAAiB;AACb,UAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAb,IAAwB,gBAAlC,CAAZ;AACAF,MAAAA,KAAK,CAACG,OAAN,GAAgBP,YAAY,CAACO,OAAb,IAAwB,KAAxC;AACAH,MAAAA,KAAK,CAACI,KAAN,GAAcR,YAAY,CAACQ,KAAb,IAAsB,EAApC;AACA,YAAMJ,KAAN;AACH;AAEJ,GApBD;AAqBH,CAvBM;AAwBPd,SAAS;AAET,OAAO,MAAMY,YAAY,GAAGpB,SAAS,CAAC2B,OAA/B;AAEP,eAAe3B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { fields:{} };\n\nconst leadSlice = createSlice({\n    name:\"leadSlice\",\n    initialState: initialState,\n    reducers : {\n        addFields(state, action) {\n            state.fields = action.payload.fields\n        },\n    }\n});\n\nconst url = \"http://localhost:8080\";\n\nexport const getFields = (orgId, token) =>{\n   \n    return async (dispatch) => {\n       console.log(dispatch);\n        const response = await fetch(`${url}/org/${orgId}/leads/leadstable`,{\n            method:\"GET\",\n            headers : {\n                \"Content-Type\":\"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n        const responseData = await response.json();\n        dispatch(leadsActions.addFields({\n            fields: responseData\n        }));\n        if(!response.ok) {\n            let error = new Error(responseData.message || \"Error Occured!\")\n            error.isValid = responseData.isValid || false;\n            error.value = responseData.value || \"\";\n            throw(error);\n        }\n       \n    }\n} \ngetFields();\n\nexport const leadsActions = leadSlice.actions;\n\nexport default leadSlice;"]},"metadata":{},"sourceType":"module"}