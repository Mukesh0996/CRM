{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mukesh-8058/Desktop/CRM/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mukesh-8058/Desktop/CRM/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{contactsActions}from\"./contacts-slice\";var url=\"http://localhost:8080\";export var getContactsFields=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(orgId,token){var response,responseData,error;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"\".concat(url,\"/org/\").concat(orgId,\"/contacts/contactsfields\"),{method:\"GET\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(token)}});case 2:response=_context.sent;_context.next=5;return response.json();case 5:responseData=_context.sent;if(response.ok){_context.next=11;break;}error=new Error(responseData.message||\"Error Occured!\");error.isValid=responseData.isValid||false;error.value=responseData.value||\"\";throw error;case 11:return _context.abrupt(\"return\",responseData);case 12:case\"end\":return _context.stop();}}},_callee);}));return function getContactsFields(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Store/Contacts/contacts-actions.js"],"names":["contactsActions","url","getContactsFields","orgId","token","fetch","method","headers","response","json","responseData","ok","error","Error","message","isValid","value"],"mappings":"uSAAA,OAASA,eAAT,KAAgC,kBAAhC,CAEA,GAAMC,CAAAA,GAAG,CAAG,uBAAZ,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,0FAAG,iBAAOC,KAAP,CAAcC,KAAd,wKACFC,CAAAA,KAAK,WAAIJ,GAAJ,iBAAeE,KAAf,6BAA+C,CACvEG,MAAM,CAAC,KADgE,CAEvEC,OAAO,CAAE,CACL,eAAe,kBADV,CAEL,iCAA2BH,KAA3B,CAFK,CAF8D,CAA/C,CADH,QACnBI,QADmB,qCAQEA,CAAAA,QAAQ,CAACC,IAAT,EARF,QAQnBC,YARmB,kBASrBF,QAAQ,CAACG,EATY,0BAUjBC,KAViB,CAUT,GAAIC,CAAAA,KAAJ,CAAUH,YAAY,CAACI,OAAb,EAAwB,gBAAlC,CAVS,CAWrBF,KAAK,CAACG,OAAN,CAAgBL,YAAY,CAACK,OAAb,EAAwB,KAAxC,CACAH,KAAK,CAACI,KAAN,CAAcN,YAAY,CAACM,KAAb,EAAsB,EAApC,CAZqB,KAafJ,CAAAA,KAbe,yCAelBF,YAfkB,yDAAH,kBAAjBR,CAAAA,iBAAiB,gDAAvB","sourcesContent":["import { contactsActions } from \"./contacts-slice\";\n\nconst url = \"http://localhost:8080\";\n\nexport const getContactsFields = async (orgId, token) => {\n        const response = await fetch(`${url}/org/${orgId}/contacts/contactsfields`,{\n            method:\"GET\",\n            headers: {\n                \"Content-Type\":\"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n        const responseData = await response.json();\n        if(!response.ok) {\n            let error = new Error(responseData.message || \"Error Occured!\")\n            error.isValid = responseData.isValid || false;\n            error.value = responseData.value || \"\";\n            throw(error);\n        }\n        return responseData;\n}"]},"metadata":{},"sourceType":"module"}