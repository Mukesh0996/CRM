{"ast":null,"code":"import { contactsActions } from \"./contacts-slice\";\nconst url = \"http://localhost:8080\";\nexport const getContactsFields = async (orgId, token) => {\n  const response = await fetch(`${url}/contacts/org/${orgId}/contactsfields`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    let error = new Error(responseData.message || \"Error Occured!\");\n    error.isValid = responseData.isValid || false;\n    error.value = responseData.value || \"\";\n    throw error;\n  }\n\n  return responseData;\n};\nexport const getAllContacts = (orgId, token) => {\n  return async dispatch => {\n    const response = await fetch(`${url}/contacts/org/${orgId}/getrecords`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      let error = new Error(responseData.message);\n      error.isValid = responseData.isValid;\n      error.value = responseData.value;\n      throw error;\n    }\n\n    dispatch(contactsActions.replaceContacts({\n      contacts: responseData.contacts,\n      cols: responseData.contactsCols\n    }));\n  };\n};\nexport const getContactsFilterColumns = (orgId, token) => {\n  return async dispatch => {\n    const response = await fetch(`${url}/contacts/org/${orgId}/getfiltercolumns`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      let error = new Error(responseData.message);\n      error.isValid = responseData.isValid;\n      error.value = responseData.value;\n      throw error;\n    }\n\n    console.log(responseData);\n    dispatch(contactsActions.addFilterColums({\n      filterColumns: responseData.data.contactFilerColumns\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/mukesh-8058/Documents/GitHub/CRM/src/Store/Contacts/contacts-actions.js"],"names":["contactsActions","url","getContactsFields","orgId","token","response","fetch","method","headers","responseData","json","ok","error","Error","message","isValid","value","getAllContacts","dispatch","replaceContacts","contacts","cols","contactsCols","getContactsFilterColumns","console","log","addFilterColums","filterColumns","data","contactFilerColumns"],"mappings":"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","sourcesContent":["import { contactsActions } from \"./contacts-slice\";\n\nconst url = \"http://localhost:8080\";\n\nexport const getContactsFields = async (orgId, token) => {\n        const response = await fetch(`${url}/contacts/org/${orgId}/contactsfields`,{\n            method:\"GET\",\n            headers: {\n                \"Content-Type\":\"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n        const responseData = await response.json();\n        if(!response.ok) {\n            let error = new Error(responseData.message || \"Error Occured!\")\n            error.isValid = responseData.isValid || false;\n            error.value = responseData.value || \"\";\n            throw(error);\n        }\n        return responseData;\n}\n\nexport const getAllContacts =  (orgId, token) => {\n    return async (dispatch) => {\n      \n        const response = await fetch(`${url}/contacts/org/${orgId}/getrecords`, {\n            method:\"GET\",\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n    \n        const responseData = await response.json();\n        if(!response.ok) {\n            let error = new Error(responseData.message);\n            error.isValid = responseData.isValid;\n            error.value = responseData.value;\n            throw(error);\n        }\n       dispatch(contactsActions.replaceContacts({\n           contacts: responseData.contacts,\n           cols: responseData.contactsCols\n       }))\n    }\n\n}\n\nexport const getContactsFilterColumns =  (orgId, token) => {\n\n    return async (dispatch) => {\n        const response = await fetch(`${url}/contacts/org/${orgId}/getfiltercolumns`, {\n            method : \"GET\",\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        })\n        const responseData = await response.json();\n        if(!response.ok){\n            let error = new Error(responseData.message);\n            error.isValid = responseData.isValid;\n            error.value = responseData.value;\n            throw(error);\n        }\n        console.log(responseData);\n        dispatch(contactsActions.addFilterColums({\n            filterColumns: responseData.data.contactFilerColumns\n        }))\n    }\n\n}"]},"metadata":{},"sourceType":"module"}