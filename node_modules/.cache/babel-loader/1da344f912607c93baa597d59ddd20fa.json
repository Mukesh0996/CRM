{"ast":null,"code":"import { leadActions } from \"./leads-slice\";\nconst url = \"http://localhost:8080\";\nexport const getLeadsFields = async (orgId, token) => {\n  const response = await fetch(`${url}/org/${orgId}/leads/leadstable`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    let error = new Error(responseData.message || \"Error Occured!\");\n    error.isValid = responseData.isValid || false;\n    error.value = responseData.value || \"\";\n    throw error;\n  }\n\n  return responseData;\n};\nexport const getAllLeads = () => {\n  return dispatch => {\n    dispatch(leadActions.replaceLeads({\n      leads: [\"one\", \"two\", \"three\"]\n    }));\n  };\n};\nexport const addLeadRecord = (data, token) => {\n  return async dispatch => {\n    try {\n      const {\n        orgId\n      } = data;\n      delete data['orgId'];\n      const leadObj = data;\n      const response = await fetch(`${url}/org/${orgId}/leads/addrecord`, {\n        method: \"POST\",\n        body: JSON.stringify(leadObj),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        let error = new Error(responseData.message);\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\";\n        throw error;\n      }\n    } catch (error) {}\n  };\n};","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Store/Leads/leads-actions.js"],"names":["leadActions","url","getLeadsFields","orgId","token","response","fetch","method","headers","responseData","json","ok","error","Error","message","isValid","value","getAllLeads","dispatch","replaceLeads","leads","addLeadRecord","data","leadObj","body","JSON","stringify"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AAEA,MAAMC,GAAG,GAAG,uBAAZ;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAOC,KAAP,EAAcC,KAAd,KAAwB;AAClD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,GAAI,QAAOE,KAAM,mBAArB,EAAwC;AAChEI,IAAAA,MAAM,EAAC,KADyD;AAEhEC,IAAAA,OAAO,EAAG;AACN,sBAAe,kBADT;AAEN,uBAAkB,UAASJ,KAAM;AAF3B;AAFsD,GAAxC,CAA5B;AAOA,QAAMK,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AACA,MAAG,CAACL,QAAQ,CAACM,EAAb,EAAiB;AACb,QAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAb,IAAwB,gBAAlC,CAAZ;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBN,YAAY,CAACM,OAAb,IAAwB,KAAxC;AACAH,IAAAA,KAAK,CAACI,KAAN,GAAcP,YAAY,CAACO,KAAb,IAAsB,EAApC;AACA,UAAMJ,KAAN;AACH;;AAED,SAAOH,YAAP;AACH,CAjBM;AAoBP,OAAO,MAAMQ,WAAW,GAAG,MAAM;AAC7B,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAClB,WAAW,CAACmB,YAAZ,CAAyB;AAC9BC,MAAAA,KAAK,EAAC,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf;AADwB,KAAzB,CAAD,CAAR;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOlB,KAAP,KAAiB;AAC1C,SAAO,MAAOc,QAAP,IAAoB;AACvB,QAAI;AAEA,YAAM;AAAEf,QAAAA;AAAF,UAAYmB,IAAlB;AACA,aAAOA,IAAI,CAAC,OAAD,CAAX;AACA,YAAMC,OAAO,GAAGD,IAAhB;AACA,YAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,GAAI,QAAOE,KAAM,kBAArB,EAAuC;AAC3DI,QAAAA,MAAM,EAAC,MADoD;AAE3DiB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAFqD;AAG3Df,QAAAA,OAAO,EAAE;AACT,0BAAgB,kBADP;AAET,2BAAkB,UAASJ,KAAM;AAFxB;AAHkD,OAAvC,CAA5B;AASJ,YAAMK,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AACA,UAAG,CAACL,QAAQ,CAACM,EAAb,EAAiB;AACb,YAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAvB,CAAZ;AACAF,QAAAA,KAAK,CAACG,OAAN,GAAgBN,YAAY,CAACM,OAAb,IAAwB,KAAxC;AACAH,QAAAA,KAAK,CAACI,KAAN,GAAcP,YAAY,CAACO,KAAb,IAAsB,EAApC;AACA,cAAMJ,KAAN;AACH;AACA,KArBD,CAqBE,OAAOA,KAAP,EAAc,CAGf;AAEJ,GA3BD;AAgCC,CAjCE","sourcesContent":["import { leadActions } from \"./leads-slice\";\n\nconst url = \"http://localhost:8080\";\n\nexport const getLeadsFields = async (orgId, token) => {\n    const response = await fetch(`${url}/org/${orgId}/leads/leadstable`,{\n        method:\"GET\",\n        headers : {\n            \"Content-Type\":\"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    });\n    const responseData = await response.json();\n    if(!response.ok) {\n        let error = new Error(responseData.message || \"Error Occured!\")\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\";\n        throw(error);\n    }\n   \n    return responseData;\n}\n\n\nexport const getAllLeads = () => {\n    return (dispatch) => {\n        dispatch(leadActions.replaceLeads({\n            leads:[\"one\", \"two\", \"three\"]\n        }))\n    }\n}\n\nexport const addLeadRecord = (data, token) => {\n    return async (dispatch) => {\n        try {\n            \n            const { orgId } = data;\n            delete data['orgId'];\n            const leadObj = data;\n            const response = await fetch(`${url}/org/${orgId}/leads/addrecord`,{\n                    method:\"POST\",\n                    body: JSON.stringify(leadObj),\n                    headers :{\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n            }\n        });\n\n        const responseData = await response.json();\n        if(!response.ok) {\n            let error = new Error(responseData.message);\n            error.isValid = responseData.isValid || false;\n            error.value = responseData.value || \"\"\n            throw(error)\n        }\n        } catch (error) {\n\n            \n        }\n        \n    }\n    \n\n  \n\n    }"]},"metadata":{},"sourceType":"module"}