{"ast":null,"code":"var _jsxFileName = \"/Users/mukesh-8058/Desktop/CRM/src/Pages/Leads.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LeadActions from '../Components/Leads/LeadsActions';\nimport LeadsContainer from \"../Components/Leads/LeadsContainer\";\nimport useHttp from \"../Hooks/httpHook\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\nimport { getAllLeads, getLeadColumns } from \"../Store/Leads/leads-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LeadsModule = () => {\n  _s();\n\n  const ctx = useContext(AuthContext); // const { sendRequest: getLeads, isLoading, error } = useHttp(getAllLeads, true);\n\n  const {\n    sendRequest,\n    isLoading: leadColumnsLoading,\n    error: errorGettingLeads\n  } = useHttp(getLeadColumns, true);\n  useEffect(() => {\n    sendRequest(ctx.orgId);\n  }, []);\n  const leadColumns = useSelector(state => state.leads.columns);\n  const leads = useSelector(state => state.leads.leads);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LeadActions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(LeadsContainer, {\n      leadkeys: leadColumns || [],\n      leads: leads\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 12\n  }, this);\n};\n\n_s(LeadsModule, \"/XyeV5uiBbnPmw0GWm70qrqldqk=\", false, function () {\n  return [useHttp, useSelector, useSelector];\n});\n\n_c = LeadsModule;\nexport default LeadsModule;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeadsModule\");","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Pages/Leads.js"],"names":["useContext","Fragment","useEffect","useDispatch","useSelector","LeadActions","LeadsContainer","useHttp","AuthContext","getAllLeads","getLeadColumns","LeadsModule","ctx","sendRequest","isLoading","leadColumnsLoading","error","errorGettingLeads","orgId","leadColumns","state","leads","columns"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,8BAA5C;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,GAAG,GAAGZ,UAAU,CAACQ,WAAD,CAAtB,CADsB,CAEtB;;AACA,QAAM;AAAEK,IAAAA,WAAF;AAAeC,IAAAA,SAAS,EAAEC,kBAA1B;AAA8CC,IAAAA,KAAK,EAAEC;AAArD,MAA0EV,OAAO,CAACG,cAAD,EAAiB,IAAjB,CAAvF;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,WAAW,CAACD,GAAG,CAACM,KAAL,CAAX;AAEH,GAHQ,EAGP,EAHO,CAAT;AAKA,QAAMC,WAAW,GAAGf,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,OAAtB,CAA/B;AACA,QAAMD,KAAK,GAAGjB,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYA,KAAtB,CAAzB;AAEA,sBAAO,QAAC,QAAD;AAAA,4BACK,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADL,eAEK,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEF,WAAW,IAAI,EAAzC;AAA6C,MAAA,KAAK,EAAEE;AAApD;AAAA;AAAA;AAAA;AAAA,YAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,CAjBD;;GAAMV,W;UAG8EJ,O,EAO5DH,W,EACNA,W;;;KAXZO,W;AAmBN,eAAeA,WAAf","sourcesContent":["import { useContext } from \"react\";\nimport { Fragment, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LeadActions from '../Components/Leads/LeadsActions';\nimport LeadsContainer from \"../Components/Leads/LeadsContainer\";\nimport useHttp from \"../Hooks/httpHook\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\nimport { getAllLeads, getLeadColumns } from \"../Store/Leads/leads-actions\";\n\nconst LeadsModule = () => {\n    const ctx = useContext(AuthContext);\n    // const { sendRequest: getLeads, isLoading, error } = useHttp(getAllLeads, true);\n    const { sendRequest, isLoading: leadColumnsLoading, error: errorGettingLeads} = useHttp(getLeadColumns, true);\n\n    useEffect(() => {\n        sendRequest(ctx.orgId);\n      \n    },[]);\n\n    const leadColumns = useSelector(state => state.leads.columns);\n    const leads = useSelector(state => state.leads.leads);\n\n    return <Fragment> \n                <LeadActions/>\n                <LeadsContainer leadkeys={leadColumns || []} leads={leads}/>\n            </Fragment>\n}\n\nexport default LeadsModule;"]},"metadata":{},"sourceType":"module"}