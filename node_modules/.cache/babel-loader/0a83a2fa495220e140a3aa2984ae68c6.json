{"ast":null,"code":"import { leadActions } from \"./leads-slice\";\nconst url = \"http://localhost:8080\";\nexport const getFilterColumns = (orgId, token) => {\n  return async dispatch => {\n    const response = await fetch(`${url}/org/${orgId}/leads/getfilterColumns`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      let error = new Error(responseData.message || \"Error Occured!\");\n      error.isValid = responseData.isValid || false;\n      error.value = responseData.value || \"\";\n      throw error;\n    }\n\n    dispatch(leadActions.addFilterColumns({\n      filterColumns: responseData.data\n    }));\n  };\n};\nexport const getAllLeads = (orgId, token) => {\n  return async dispatch => {\n    const response = await fetch(`${url}/org/${orgId}/leads/getrecords`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      let error = new Error(responseData.message || \"Error Occured!\");\n      error.isValid = responseData.isValid || false;\n      error.value = responseData.value || \"\";\n      throw error;\n    }\n\n    dispatch(leadActions.replaceLeads({\n      leads: responseData.data.leads,\n      cols: responseData.data.leadCols,\n      canCreate: true,\n      canEdit: true\n    }));\n  };\n};\nexport const addLeadRecord = (data, token) => {\n  return async dispatch => {\n    const {\n      orgId\n    } = data;\n    delete data['orgId'];\n    const leadObj = data;\n    const response = await fetch(`${url}/org/${orgId}/leads/addrecord`, {\n      method: \"POST\",\n      body: JSON.stringify(leadObj),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      let error = new Error(responseData.message);\n      error.isValid = responseData.isValid || false;\n      error.value = responseData.value || \"\";\n      throw error;\n    }\n\n    dispatch(leadActions.addLead({\n      lead: responseData.data\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Store/Leads/leads-actions.js"],"names":["leadActions","url","getFilterColumns","orgId","token","dispatch","response","fetch","method","headers","responseData","json","ok","error","Error","message","isValid","value","addFilterColumns","filterColumns","data","getAllLeads","replaceLeads","leads","cols","leadCols","canCreate","canEdit","addLeadRecord","leadObj","body","JSON","stringify","addLead","lead"],"mappings":"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","sourcesContent":["import { leadActions } from \"./leads-slice\";\n\nconst url = \"http://localhost:8080\";\n\n\n\nexport const getFilterColumns = (orgId, token) => {\n    return async (dispatch) => {\n        const response = await fetch(`${url}/org/${orgId}/leads/getfilterColumns`,{\n            method:\"GET\",\n            headers : {\n                \"Content-Type\":\"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        })\n        const responseData = await response.json();\n\n        if(!response.ok) {\n            let error = new Error(responseData.message || \"Error Occured!\")\n            error.isValid = responseData.isValid || false;\n            error.value = responseData.value || \"\";\n            throw(error);\n        }\n        dispatch(leadActions.addFilterColumns({\n            filterColumns: responseData.data\n        }))\n       \n    }\n}\n\n\nexport const getAllLeads = (orgId, token) => {\n    return async (dispatch) => {\n        const response = await fetch(`${url}/org/${orgId}/leads/getrecords`,{\n            method:\"GET\",\n            headers :{\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n        const responseData = await response.json();\n        if(!response.ok) {\n            let error = new Error(responseData.message || \"Error Occured!\")\n            error.isValid = responseData.isValid || false;\n            error.value = responseData.value || \"\";\n            throw(error);\n        }\n        dispatch(leadActions.replaceLeads({\n            leads: responseData.data.leads,\n            cols: responseData.data.leadCols,\n            canCreate : true,\n            canEdit: true\n        }))\n    }\n}\n\nexport const addLeadRecord = (data, token) => {\n\n    return async (dispatch) => {\n        const { orgId } = data;\n        delete data['orgId'];\n        const leadObj = data;\n        const response = await fetch(`${url}/org/${orgId}/leads/addrecord`,{\n        method:\"POST\",\n        body: JSON.stringify(leadObj),\n        headers :{\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    });\n\n    const responseData = await response.json();\n\n    if(!response.ok) {\n        let error = new Error(responseData.message);\n        error.isValid = responseData.isValid || false;\n        error.value = responseData.value || \"\";\n        throw(error);\n    }\n\n    dispatch(leadActions.addLead({\n        lead: responseData.data\n    }));\n\n    }\n}"]},"metadata":{},"sourceType":"module"}