{"ast":null,"code":"import { leadActions } from \"./leads-slice\";\nconst url = \"http://localhost:8080\";\nexport const getLeadsFields = (orgId, token) => {\n  return async dispatch => {\n    const response = await fetch(`${url}/org/${orgId}/leads/leadstable`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const responseData = await response.json();\n    dispatch(leadActions.addFields({\n      fields: responseData\n    }));\n\n    if (!response.ok) {\n      let error = new Error(responseData.message || \"Error Occured!\");\n      error.isValid = responseData.isValid || false;\n      error.value = responseData.value || \"\";\n      throw error;\n    }\n  };\n};\nexport const getAllLeads = () => {\n  return dispatch => {\n    dispatch(leadActions.replaceLeads({\n      leads: [\"one\", \"two\", \"three\"]\n    }));\n  };\n};\nexport const addLeadRecord = () => {\n  return dispatch => {};\n};","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Store/Leads/leads-actions.js"],"names":["leadActions","url","getLeadsFields","orgId","token","dispatch","response","fetch","method","headers","responseData","json","addFields","fields","ok","error","Error","message","isValid","value","getAllLeads","replaceLeads","leads","addLeadRecord"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AAEA,MAAMC,GAAG,GAAG,uBAAZ;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAE5C,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,GAAI,QAAOE,KAAM,mBAArB,EAAwC;AAChEK,MAAAA,MAAM,EAAC,KADyD;AAEhEC,MAAAA,OAAO,EAAG;AACN,wBAAe,kBADT;AAEN,yBAAkB,UAASL,KAAM;AAF3B;AAFsD,KAAxC,CAA5B;AAOA,UAAMM,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;AACAN,IAAAA,QAAQ,CAACL,WAAW,CAACY,SAAZ,CAAsB;AAC3BC,MAAAA,MAAM,EAAEH;AADmB,KAAtB,CAAD,CAAR;;AAGA,QAAG,CAACJ,QAAQ,CAACQ,EAAb,EAAiB;AACb,UAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUN,YAAY,CAACO,OAAb,IAAwB,gBAAlC,CAAZ;AACAF,MAAAA,KAAK,CAACG,OAAN,GAAgBR,YAAY,CAACQ,OAAb,IAAwB,KAAxC;AACAH,MAAAA,KAAK,CAACI,KAAN,GAAcT,YAAY,CAACS,KAAb,IAAsB,EAApC;AACA,YAAMJ,KAAN;AACH;AACJ,GAlBD;AAmBH,CArBM;AAwBP,OAAO,MAAMK,WAAW,GAAG,MAAM;AAC7B,SAAQf,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACL,WAAW,CAACqB,YAAZ,CAAyB;AAC9BC,MAAAA,KAAK,EAAC,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf;AADwB,KAAzB,CAAD,CAAR;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,SAAQlB,QAAD,IAAc,CAEpB,CAFD;AAGH,CAJM","sourcesContent":["import { leadActions } from \"./leads-slice\";\n\nconst url = \"http://localhost:8080\";\n\nexport const getLeadsFields = (orgId, token) => {\n\n    return async (dispatch) => {\n        const response = await fetch(`${url}/org/${orgId}/leads/leadstable`,{\n            method:\"GET\",\n            headers : {\n                \"Content-Type\":\"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n        const responseData = await response.json();\n        dispatch(leadActions.addFields({\n            fields: responseData\n        }))\n        if(!response.ok) {\n            let error = new Error(responseData.message || \"Error Occured!\")\n            error.isValid = responseData.isValid || false;\n            error.value = responseData.value || \"\";\n            throw(error);\n        }\n    }\n}\n\n\nexport const getAllLeads = () => {\n    return (dispatch) => {\n        dispatch(leadActions.replaceLeads({\n            leads:[\"one\", \"two\", \"three\"]\n        }))\n    }\n}\n\nexport const addLeadRecord = () => {\n    return (dispatch) => {\n\n    }\n}"]},"metadata":{},"sourceType":"module"}