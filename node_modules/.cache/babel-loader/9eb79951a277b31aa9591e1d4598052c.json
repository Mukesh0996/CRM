{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState({\n    isValid: false,\n    value: \"\",\n    message: \"\"\n  });\n\n  const sendRequest = async (requestConfig, sendData) => {\n    setIsLoading(true);\n\n    try {} catch (error) {\n      setIsLoading(false);\n      setError(prevState => {\n        return { ...prevState,\n          message: error.message\n        };\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading,\n    sendRequest,\n    error\n  };\n};\n\n_s(useHttp, \"ISvcW3SrWLnbitTF/Tft5kSrH8A=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/React/front/src/Hooks/httpHook.js"],"names":["useState","useHttp","isLoading","setIsLoading","error","setError","isValid","value","message","sendRequest","requestConfig","sendData","prevState"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAElB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AAACM,IAAAA,OAAO,EAAE,KAAV;AAAiBC,IAAAA,KAAK,EAAC,EAAvB;AAA2BC,IAAAA,OAAO,EAAC;AAAnC,GAAD,CAAlC;;AAEA,QAAMC,WAAW,GAAG,OAAOC,aAAP,EAAqBC,QAArB,KAAkC;AAClDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI,CAEH,CAFD,CAEE,OAAOC,KAAP,EAAc;AACZD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACO,SAAS,IAAI;AAClB,eAAO,EAAE,GAAGA,SAAL;AAAgBJ,UAAAA,OAAO,EAAEJ,KAAK,CAACI;AAA/B,SAAP;AACH,OAFO,CAAR;AAGH;;AACDL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAXD;;AAaA,SAAO;AACHD,IAAAA,SADG;AAEHO,IAAAA,WAFG;AAGHL,IAAAA;AAHG,GAAP;AAMH,CAxBD;;GAAMH,O;;AA0BN,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\"\n\n\nconst useHttp = () => {\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState({isValid: false, value:\"\", message:\"\"});\n\n    const sendRequest = async (requestConfig,sendData) => {\n        setIsLoading(true);\n        try {\n                  \n        } catch (error) {\n            setIsLoading(false);\n            setError(prevState => {\n                return { ...prevState, message: error.message }\n            })\n        }\n        setIsLoading(false);\n    }\n\n    return {\n        isLoading,\n        sendRequest,\n        error\n    }\n\n}\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}