{"ast":null,"code":"var _jsxFileName = \"/Users/mukesh-8058/Desktop/CRM/src/Components/Leads/AddLead.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport useForm from '../../Hooks/useForm';\nimport styles from './AddLead.module.css';\nimport LoadingPage from '../../Pages/loadingPage';\nimport Input from '../Input/Input';\nimport useHttp from '../../Hooks/httpHook';\nimport AuthContext from '../../Store/Auth/AuthContext';\nimport { addLeadRecord, getLeadsFields } from '../../Store/Leads/leads-actions';\nimport FormActions from '../FormActions/FormActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddLead = () => {\n  _s();\n\n  //custom hooks\n  const {\n    inputHandler,\n    address,\n    information,\n    isLoading\n  } = useForm(getLeadsFields);\n  const {\n    sendRequest: addRecord,\n    error\n  } = useHttp(addLeadRecord, true);\n  const [description, setDescription] = useState(\"\");\n  const ctx = useContext(AuthContext);\n  let informationFields, addressFields;\n  const history = useHistory();\n\n  if (address) {\n    addressFields = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Address Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.inp,\n        children: Object.values(address).map(obj => /*#__PURE__*/_jsxDEV(Input, {\n          label: obj.label,\n          type: obj.type,\n          name: obj.name,\n          value: obj.value,\n          section: obj.section,\n          handleChange: inputHandler\n        }, obj.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 64\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 26\n    }, this);\n  }\n\n  if (information) {\n    informationFields = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Lead Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.inp,\n        children: Object.values(information).map(obj => /*#__PURE__*/_jsxDEV(Input, {\n          label: obj.label,\n          type: obj.type,\n          name: obj.name,\n          value: obj.value,\n          section: obj.section,\n          handleChange: inputHandler,\n          error: error\n        }, obj.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 73\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 30\n    }, this);\n  }\n\n  const saveHandler = e => {\n    e.preventDefault();\n    let leadObj = {\n      description,\n      orgId: ctx.orgId\n    };\n    Object.values(address).map(leadAddress => leadObj = { ...leadObj,\n      [leadAddress.name]: leadAddress.value\n    });\n    Object.values(information).map(leadInfo => leadObj = { ...leadObj,\n      [leadInfo.name]: leadInfo.value\n    });\n    addRecord(leadObj);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.form,\n    autoComplete: \"none\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(FormActions, {\n      saveHandler: saveHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.formfields,\n      children: [informationFields, addressFields, /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Description Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.inp,\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          name: \"description\",\n          onChange: e => setDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 13\n  }, this);\n};\n\n_s(AddLead, \"f0sUKvVnMpzKKd+SmHyi8l9dNVQ=\", false, function () {\n  return [useForm, useHttp, useHistory];\n});\n\n_c = AddLead;\nexport default AddLead;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLead\");","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Components/Leads/AddLead.js"],"names":["React","useContext","useState","useHistory","useForm","styles","LoadingPage","Input","useHttp","AuthContext","addLeadRecord","getLeadsFields","FormActions","AddLead","inputHandler","address","information","isLoading","sendRequest","addRecord","error","description","setDescription","ctx","informationFields","addressFields","history","inp","Object","values","map","obj","label","type","name","value","section","id","saveHandler","e","preventDefault","leadObj","orgId","leadAddress","leadInfo","form","formfields","target"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport useForm from '../../Hooks/useForm';\nimport styles from './AddLead.module.css';\nimport LoadingPage from '../../Pages/loadingPage';\nimport Input from '../Input/Input';\nimport useHttp from '../../Hooks/httpHook';\nimport AuthContext from '../../Store/Auth/AuthContext';\nimport { addLeadRecord, getLeadsFields } from '../../Store/Leads/leads-actions';\nimport FormActions from '../FormActions/FormActions';\n\n\nconst AddLead = () => {\n    //custom hooks\n    const { inputHandler, address, information, isLoading } = useForm(getLeadsFields);\n    const { sendRequest: addRecord, error } = useHttp( addLeadRecord, true);\n    const [description, setDescription] = useState(\"\");\n    const ctx = useContext(AuthContext);\n    let informationFields, addressFields;\n    const history = useHistory();\n\n\n    if(address) {\n         addressFields = <React.Fragment>\n                            <h3>Address Information</h3>\n                            <div className={styles.inp}>\n                            {Object.values(address).map(obj => <Input key={obj.id} label={obj.label} type={obj.type} name={obj.name} value={obj.value} section={obj.section} handleChange={inputHandler}/>) }         \n                            </div>\n                            </React.Fragment>\n    }\n\n    if(information) {\n        informationFields =  <React.Fragment>\n                                <h3>Lead Information</h3>\n                                <div className={styles.inp}>\n                                { Object.values(information).map(obj => <Input \n                                    key={obj.id} \n                                    label={obj.label} \n                                    type={obj.type} \n                                    name={obj.name} \n                                    value={obj.value} \n                                    section={obj.section} \n                                    handleChange={inputHandler}\n                                    error={error}\n                                    />) }       \n                                </div>\n                                </React.Fragment>\n    }\n\n    const saveHandler = (e) => {\n        e.preventDefault();\n        let leadObj = { description, orgId: ctx.orgId };\n\n        Object.values(address).map(leadAddress =>  leadObj = { ...leadObj, [leadAddress.name] : leadAddress.value });\n        Object.values(information).map(leadInfo => leadObj = { ...leadObj, [leadInfo.name]: leadInfo.value });\n        addRecord(leadObj);\n    }\n\n    return (\n            <form className={styles.form} autoComplete=\"none\">\n                {isLoading && <LoadingPage/>}\n                <FormActions saveHandler={saveHandler}/>\n                <div className={styles.formfields}>\n                        {informationFields}\n                        {addressFields}\n                    <h3>Description Information</h3>\n                    <div  className={styles.inp}>\n                        <textarea type=\"text\" name=\"description\" onChange={(e) => setDescription(e.target.value)}></textarea>\n                    </div>\n                </div>       \n            </form>\n    )\n\n}\n\nexport default AddLead;"]},"metadata":{},"sourceType":"module"}