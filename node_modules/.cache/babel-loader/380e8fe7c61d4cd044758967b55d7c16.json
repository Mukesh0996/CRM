{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\n\nconst useHttp = (requestFn, dispatcherIsTrue) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState({\n    isValid: false,\n    value: \"\",\n    message: \"\"\n  });\n  const ctx = useContext(AuthContext);\n  const dispatch = useDispatch();\n\n  const sendRequest = async (orgId, sendData) => {\n    setIsLoading(true);\n    let responseData;\n\n    try {\n      if (dispatcherIsTrue) {\n        responseData = await dispatch(requestFn(orgId, ctx.token)); //    console.log(\"response data is\", responseData); need to check later\n        //     sendData(responseData);\n      } else {\n        responseData = await requestFn(orgId, ctx.token);\n        sendData(responseData); //transports the data from the server to the respective function component\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setError({\n        isValid: error.isValid,\n        message: error.message,\n        value: error.value\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading,\n    sendRequest,\n    error\n  };\n};\n\n_s(useHttp, \"0vNiIYTZtZvqmJPpxWCV6ur8k4o=\", false, function () {\n  return [useDispatch];\n});\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/CRM/src/Hooks/httpHook.js"],"names":["useContext","useState","useDispatch","AuthContext","useHttp","requestFn","dispatcherIsTrue","isLoading","setIsLoading","error","setError","isValid","value","message","ctx","dispatch","sendRequest","orgId","sendData","responseData","token"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;AAGA,MAAMC,OAAO,GAAG,CAACC,SAAD,EAAYC,gBAAZ,KAAiC;AAAA;;AAE7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC;AAACU,IAAAA,OAAO,EAAE,KAAV;AAAiBC,IAAAA,KAAK,EAAC,EAAvB;AAA2BC,IAAAA,OAAO,EAAC;AAAnC,GAAD,CAAlC;AACA,QAAMC,GAAG,GAAGd,UAAU,CAACG,WAAD,CAAtB;AACA,QAAMY,QAAQ,GAAGb,WAAW,EAA5B;;AAEA,QAAMc,WAAW,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AAC3CV,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAIW,YAAJ;;AACA,QAAI;AAEA,UAAGb,gBAAH,EAAqB;AAClBa,QAAAA,YAAY,GAAI,MAAMJ,QAAQ,CAACV,SAAS,CAACY,KAAD,EAAQH,GAAG,CAACM,KAAZ,CAAV,CAA9B,CADkB,CAErB;AACA;AACC,OAJD,MAIO;AACHD,QAAAA,YAAY,GAAG,MAAMd,SAAS,CAACY,KAAD,EAAQH,GAAG,CAACM,KAAZ,CAA9B;AACAF,QAAAA,QAAQ,CAACC,YAAD,CAAR,CAFG,CAEsB;AAE5B;AAEJ,KAZD,CAYE,OAAOV,KAAP,EAAc;AAEZD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC;AACLC,QAAAA,OAAO,EAAEF,KAAK,CAACE,OADV;AAELE,QAAAA,OAAO,EAAEJ,KAAK,CAACI,OAFV;AAGLD,QAAAA,KAAK,EAAEH,KAAK,CAACG;AAHR,OAAD,CAAR;AAKH;;AACDJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAzBD;;AA2BA,SAAO;AACHD,IAAAA,SADG;AAEHS,IAAAA,WAFG;AAGHP,IAAAA;AAHG,GAAP;AAMH,CAxCD;;GAAML,O;UAKeF,W;;;AAqCrB,eAAeE,OAAf","sourcesContent":["import { useContext, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\n\n\nconst useHttp = (requestFn, dispatcherIsTrue) => {\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState({isValid: false, value:\"\", message:\"\"});\n    const ctx = useContext(AuthContext);\n    const dispatch = useDispatch();\n\n    const sendRequest = async (orgId, sendData) => {\n        setIsLoading(true);\n        let responseData;\n        try {\n\n            if(dispatcherIsTrue) {\n               responseData =  await dispatch(requestFn(orgId, ctx.token));\n            //    console.log(\"response data is\", responseData); need to check later\n            //     sendData(responseData);\n            } else {\n                responseData = await requestFn(orgId, ctx.token);\n                sendData(responseData);  //transports the data from the server to the respective function component\n\n            }   \n\n        } catch (error) {\n\n            setIsLoading(false);\n            setError({\n                isValid: error.isValid,\n                message: error.message,\n                value: error.value\n            });\n        }\n        setIsLoading(false);\n    }\n\n    return {\n        isLoading,\n        sendRequest,\n        error\n    }\n\n}\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}