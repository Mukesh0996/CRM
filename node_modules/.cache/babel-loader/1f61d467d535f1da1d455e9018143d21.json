{"ast":null,"code":"var _jsxFileName = \"/Users/mukesh-8058/Documents/GitHub/CRM/src/Pages/Contacts.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useContext, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ContactsContainer from \"../Components/Contacts/ContactsContainer\";\nimport ModuleActions from \"../Components/Leads/LeadsActions\";\nimport useHttp from \"../Hooks/httpHook\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\nimport { getAllContacts } from \"../Store/Contacts/contacts-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactsModule = () => {\n  _s();\n\n  const ctx = useContext(AuthContext);\n  const {\n    sendRequest: getContactRecords,\n    isLoading: contactsLoading,\n    error: contactsError\n  } = useHttp(getAllContacts, false);\n  const {\n    sendRequest,\n    isLoading,\n    error\n  } = useHttp();\n  const {} = useSelector(state => state.contacts);\n  useEffect(() => {\n    getContactRecords(ctx.orgId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ModuleActions, {\n      module: \"Contacts\",\n      path: \"add-contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(ContactsContainer, {\n      contactCols: [],\n      contacts: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ContactsModule, \"zhg3bbpF2rG4ZVpqzwCW3/Ghz+0=\", false, function () {\n  return [useHttp, useHttp, useSelector];\n});\n\n_c = ContactsModule;\nexport default ContactsModule;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsModule\");","map":{"version":3,"sources":["/Users/mukesh-8058/Documents/GitHub/CRM/src/Pages/Contacts.js"],"names":["Fragment","useContext","useEffect","useSelector","ContactsContainer","ModuleActions","useHttp","AuthContext","getAllContacts","ContactsModule","ctx","sendRequest","getContactRecords","isLoading","contactsLoading","error","contactsError","state","contacts","orgId"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,iBAAP,MAA8B,0CAA9B;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,cAAT,QAA+B,oCAA/B;;;AAGA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAEzB,QAAMC,GAAG,GAAGT,UAAU,CAACM,WAAD,CAAtB;AACA,QAAM;AAACI,IAAAA,WAAW,EAAGC,iBAAf;AAAkCC,IAAAA,SAAS,EAAEC,eAA7C;AAA8DC,IAAAA,KAAK,EAAEC;AAArE,MAAsFV,OAAO,CAACE,cAAD,EAAiB,KAAjB,CAAnG;AACA,QAAM;AAACG,IAAAA,WAAD;AAAcE,IAAAA,SAAd;AAAyBE,IAAAA;AAAzB,MAAkCT,OAAO,EAA/C;AAEA,QAAM,KAAKH,WAAW,CAAEc,KAAD,IAAUA,KAAK,CAACC,QAAjB,CAAtB;AACAhB,EAAAA,SAAS,CAAC,MAAK;AACXU,IAAAA,iBAAiB,CAACF,GAAG,CAACS,KAAL,CAAjB;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,sBAAO,QAAC,QAAD;AAAA,4BACS,QAAC,aAAD;AAAe,MAAA,MAAM,EAAC,UAAtB;AAAiC,MAAA,IAAI,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,YADT,eAES,QAAC,iBAAD;AAAmB,MAAA,WAAW,EAAE,EAAhC;AAAoC,MAAA,QAAQ,EAAE;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFT;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH,CAfD;;GAAMV,c;UAG0FH,O,EACpDA,O,EAE7BH,W;;;KANTM,c;AAiBN,eAAeA,cAAf","sourcesContent":["import { Fragment, useContext, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ContactsContainer from \"../Components/Contacts/ContactsContainer\";\nimport ModuleActions from \"../Components/Leads/LeadsActions\";\nimport useHttp from \"../Hooks/httpHook\";\nimport AuthContext from \"../Store/Auth/AuthContext\";\nimport { getAllContacts } from \"../Store/Contacts/contacts-actions\";\n\n\nconst ContactsModule = () => {\n\n    const ctx = useContext(AuthContext);\n    const {sendRequest : getContactRecords, isLoading: contactsLoading, error: contactsError} = useHttp(getAllContacts, false);\n    const {sendRequest, isLoading, error} = useHttp();\n\n    const {} = useSelector((state)=> state.contacts);\n    useEffect(()=> {\n        getContactRecords(ctx.orgId);\n    }, [])\n    return <Fragment>\n                    <ModuleActions module=\"Contacts\" path=\"add-contact\"/>\n                    <ContactsContainer contactCols={[]} contacts={[]}/>\n         </Fragment>\n\n}\n\nexport default ContactsModule;"]},"metadata":{},"sourceType":"module"}